plot(ravensData$ravenScore, logRegRavens$fitted,
pch=19, col="blue",
ylab="Prob Win",
xlab="Raven Score")
exp(logRegRavens$coeff)
exp(confint(logRegRavens))
anova(logRegRavens,test="Chisq")
set.seed(3433); par(mfrow=c(1,2))
poisData2 <- rpois(100,lambda=100)
poisData1 <- rpois(100,lambda=50)
hist(poisData1,col="blue",xlim=c(0,150))
hist(poisData2,col="blue",xlim=c(0,150))
c(mean(poisData1),var(poisData1))
c(mean(poisData2),var(poisData2))
download.file("https://dl.dropbox.com/u/7710864/data/gaData.rda",
destfile="./data/gaData.rda",method="curl")
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
plot(gaData$julian,gaData$visits,
pch=19,col="darkgrey",
xlab="Julian",ylab="Visits")
plot(gaData$julian,gaData$visits,
pch=19,col="darkgrey",
xlab="Julian",ylab="Visits")
plot(gaData$julian,gaData$visits,
pch=19,col="darkgrey",
xlab="Julian",ylab="Visits")
lm1 <- lm(gaData$visits ~ gaData$julian)
abline(lm, col="red", lwd=3)
abline(lm1, col="red", lwd=3)
glm1 <- glm(gaData$visits ~ gaData$julian, family="poisson")
lines(gaData$julian, glm1$fitted, col="blue", lwd=3)
plot(glm1$fitted,glm1$residuals,
pch=19, col="grey",
ylab="Residuals",
xlab="Date")
{
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a<-(1-level)/2;a<-c(a,1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,pct)
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
library(sandwich)
confint.agnostic <- function (object, parm, level = 0.95, ...) {
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a<-(1-level)/2;a<-c(a,1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,pct)
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
library(sandwich)
install.packages("sandwich")
library(sandwich)
confint.agnostic <- function (object, parm, level = 0.95, ...) {
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a<-(1-level)/2;a<-c(a,1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,pct)
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
confint.agnostic <- function (object, parm, level = 0.95, ...) {
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a<-(1-level)/2;a<-c(a,1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,pct))
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
confint(glm1)
confint.agnostic(glm1)
#Fitting rates in R
glm2 <- glm(gaData$simplystats ~ julian(gaData$date),
offset=log(visits+1),
family="poisson",
data=gaData)
plot(julian(gaData$date),glm2$fitted,
col="blue",pch=19,
xlab="Date",ylab="Fitted Counts")
points(julian(gaData$date),glm1$fitted
,col="red",pch=19)
plot(julian(gaData$date),gaData$simplystats/(gaData$visits+1),
col="grey",
xlab="Date", ylab="Fitted Rates",
pch=19)
lines(julian(gaData$date),glm2$fitted/(gaData$visits+1),
col="blue",lwd=3)
set.seed(3433); par(mfrow=c(1,2))
data <- rnorm(100,mean=seq(0,3,length=100),
sd=seq(0.1,3,length=100))
lm1 <- lm(data ~ seq(0,3,length=100))
plot(seq(0,3,length=100),data,pch=19,col="grey")
abline(lm1,col="red",lwd=3)
plot(seq(0,3,length=100),lm1$residuals,,pch=19,col="grey")
abline(c(0,0),col="red",lwd=3)
vcovHC(lm1)
summary(lm1)$cov.unscaled
#Model checking - linear trend
set.seed(3433); par(mfrow=c(1,2))
data <- rnorm(100,mean=seq(0,3,length=100)^3,sd=2)
lm1 <- lm(data ~ seq(0,3,length=100))
plot(seq(0,3,length=100),data,pch=19,col="grey")
abline(lm1,col="red",lwd=3)
plot(seq(0,3,length=100),lm1$residuals,,pch=19,col="grey")
abline(c(0,0),col="red",lwd=3)
#Model checking - missing covariate
set.seed(3433); par(mfrow=c(1,3))
z <- rep(c(-0.5,0.5),50)
data <- rnorm(100,mean=(seq(0,3,length=100) + z),
sd=seq(0.1,3,length=100))
lm1 <- lm(data ~ seq(0,3,length=100))
plot(seq(0,3,length=100),data,pch=19,col=((z>0)+3))
abline(lm1,col="red",lwd=3)
plot(seq(0,3,length=100),lm1$residuals,pch=19,col=((z>0)+3))
abline(c(0,0),col="red",lwd=3)
boxplot(lm1$residuals ~ z,col = ((z>0)+3) )
set.seed(343); par(mfrow=c(1,2)); betahat <- rep(NA,100)
x <- seq(0,3,length=100); y <- rcauchy(100)
lm1 <- lm(y ~ x) plot(x,y,pch=19,col="blue")
abline(lm1,col="red",lwd=3)
for(i in 1:length(data)){
betahat[i] <- lm(y[-i] ~ x[-i])$coeff[2]
}
plot(betahat - lm1$coeff[2],col="blue",pch=19)
abline(c(0,0),col="red",lwd=3)
#Model checking - outliers
set.seed(343); par(mfrow=c(1,2)); betahat <- rep(NA,100)
x <- seq(0,3,length=100); y <- rcauchy(100)
lm1 <- lm(y ~ x)
plot(x,y,pch=19,col="blue")
abline(lm1,col="red",lwd=3)
for(i in 1:length(data)){
betahat[i] <- lm(y[-i] ~ x[-i])$coeff[2]
}
plot(betahat - lm1$coeff[2],col="blue",pch=19)
abline(c(0,0),col="red",lwd=3)
set.seed(343)
x <- seq(0,3,length=100)
y <- rcauchy(100)
lm1<-lm(y~x)
rlm1<-rlm(y~x)
lm1$coeff
rlm1$coeff
install.packages{"MASS"}
install.packages("MASS")
set.seed(343)
install.packages("MASS")
install.packages("MASS")
library(MASS)
set.seed(343)
x <- seq(0,3,length=100)
y <- rcauchy(100)
lm1<-lm(y~x)
rlm1<-rlm(y~x)
lm1$coeff
rlm1$coeff
par(mfrow=c(1,2))
plot(x,y,pch=19,col="grey")
lines(x,lm1$fitted,col="blue",lwd=3);
lines(x,rlm1$fitted,col="green",lwd=3)
plot(x,y,pch=19,col="grey",ylim=c(-5,5),main="Zoomed In")
lines(x,lm1$fitted,col="blue",lwd=3);
lines(x,rlm1$fitted,col="green",lwd=3)
set.seed(343); par(mfrow=c(1,2))
x <- seq(0,3,length=100); y <- rnorm(100);
lm1 <- lm(y ~ x)
plot(lm1)
#Movie Data
download.file("http://www.rossmanchance.com/iscam2/data/movies03RT.txt",
destfile="./data/movies.txt")
movies <- read.table("./data/movies.txt",sep="\t",
header=T,quote="")
head(movies)
movies <- movies[,-1]
lm1 <- lm(score ~ .,data=movies)
aicFormula <- step(lm1)
aicFormula
library(leaps);
regSub <- regsubsets(score ~ .,data=movies)
plot(regSub)
par(mfcol=c(1,1))
plot(regSub)
library(BMA)
bicglm1 <- bic.glm(score ~.,data=movies,glm.family="gaussian")
print(bicglm1)
install.packages("BMA")
library(BMA)
bicglm1 <- bic.glm(score ~.,data=movies,glm.family="gaussian")
print(bicglm1)
data(warpbreaks)
log(0.2/(1-0.2))
library(glm2)
install.packages("glm2")
library(glm2)
data(crabs)
rstudio::viewData(crabs)
?crabs
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
lines(crabs$Width,glm1$fitted,col="red",lwd=3)
ablines(crabs$Width,glm1$fitted,col="red",lwd=3)
abline(crabs$Width,glm1$fitted,col="red",lwd=3)
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
abline(crabs$Width,glm1$fitted,col="red",lwd=3)
lines(crabs$Width,glm1$fitted,col="red",lwd=3)
rstudio::viewData(crabs)
lines(crabs[sort(crabs$Width),"Width"], glm1$fitted,col="red",lwd=3)
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(sort(crabs$Width),"Satellites"] ~ sort(crabs$Width),"Width"], family="poisson")
lines(crabs[sort(crabs$Width),"Width"], glm1$fitted,col="red",lwd=3)
summary(glm1)
library(glm2)
data(crabs)
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(crabs$Satellites ~ crabs$Width], family="poisson")
lines(crabs$Width, glm1$fitted,col="red",lwd=3)
summary(glm1)
points(crabs$Width, glm1$fitted,col="red",lwd=3)
data(crabs)
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
points(crabs$Width, glm1$fitted,col="red",lwd=3,pch=19)
summary(glm1)
glm1$coefficients
glm1$coefficients[1]+glm1$coefficients[2]*22
exp(glm1$coefficients[1]+glm1$coefficients[2]*22)
data(quine)
install.packages("quine")
data(quine)
install.packages("MASS")
library(MASS)
data(quine)
?quine
lm1 <- lm(log(Days) ~ ., data=quine)
lm1 <- lm(Days ~ ., data=quine)
aicFormula <- step(lm1)
lm1 <- lm(ln(Days) ~ ., data=quine)
lm1 <- lm(log(Days) ~ ., data=quine)
lm1 <- lm(log(Days+1) ~ ., data=quine)
aicFormula <- step(lm1)
lm1 <- lm(log(Days+1) ~ ., data=quine)
aicFormula <- step(lm1)
lm1 <- lm(log(Days+1) ~ ., data=quine)
aicFormula <- step(lm1)
library(glm2)
data(crabs)
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
points(crabs$Width, glm1$fitted,col="red",lwd=3,pch=19)
summary(glm1)
glm1$coefficients[2]
exp(glm1$coefficients[2])
par(mfrow=c(1,2))
zhat<-(-0.2<y)&(y<0.6)
plot(x,y,pch=19,col=(z+3))
plot(x,y,pch=19,col=(zhat+3))
data(faithful)
dim(faithful)
download.file("https://dl.dropbox.com/u/7710864/data/ravensData.rda", destfile="./data/ravensData.rda",method="curl")
load("./data/ravensData.rda")
head(ravensData)
glm1 <- glm(ravenWinNum ~ ravenScore,family="binomial",data=ravensData) par(mfrow=c(1,2))
boxplot(predict(glm1) ~ ravensData$ravenWinNum,col="blue")
boxplot(predict(glm1,type="response") ~ ravensData$ravenWinNum,col="blue")
glm1 <- glm(ravenWinNum ~ ravenScore,family="binomial",data=ravensData)
par(mfrow=c(1,2))
boxplot(predict(glm1) ~ ravensData$ravenWinNum,col="blue")
boxplot(predict(glm1,type="response") ~ ravensData$ravenWinNum,col="blue")
xx <- seq(0,1,length=10); err <- rep(NA,10)
for(i in 1:length(xx)){
err[i] <- sum((predict(glm1,type="response") > xx[i]) != ravensData$ravenWinNum)
}
plot(xx,err,pch=19,xlab="Cutoff",ylab="Error")
?predict
fix(xx)
fix(xx)
?cv.glm
library(boot)
cost <- function(win, pred = 0) mean(abs(win-pred) > 0.5)
glm1 <- glm(ravenWinNum ~ ravenScore,family="binomial",data=ravensData)
glm2 <- glm(ravenWinNum ~ ravenScore,family="gaussian",data=ravensData)
cv1 <- cv.glm(ravensData,glm1,cost,K=3)
cv2 <- cv.glm(ravensData,glm2,cost,K=3)
cv1$delta
library(boot)
cost <- function(win, pred = 0) mean(abs(win-pred) > 0.5)
glm1 <- glm(ravenWinNum ~ ravenScore,family="binomial",data=ravensData)
glm2 <- glm(ravenWinNum ~ ravenScore,family="gaussian",data=ravensData)
cv1 <- cv.glm(ravensData,glm1,cost,K=3)
cv2 <- cv.glm(ravensData,glm2,cost,K=3)
cv1$delta
cv2$delta
?cv.glm
data(iris)
names(iris)
table(iris$Species)
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col=as.numeric(iris$Species))
legend(1,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
par(mfcol=c(1,1))
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col=as.numeric(iris$Species))
legend(1,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col=as.numeric(iris$Species))
partition.tree(tree1,label="Species",add=TRUE)
legend(1.75,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
# An alternative is library(rpart)
library(tree)
tree1 <- tree(Species ~ Sepal.Width + Petal.Width,data=iris) summary(tree1)
# An alternative is library(rpart)
library(tree)
tree1 <- tree(Species ~ Sepal.Width + Petal.Width,data=iris)
summary(tree1)
data(iris)
names(iris)
table(iris$Species)
par(mfcol=c(1,1))
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col=as.numeric(iris$Species))
legend(1,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
# An alternative is library(rpart)
library(tree)
tree1 <- tree(Species ~ Sepal.Width + Petal.Width,data=iris)
summary(tree1)
# An alternative is library(rpart)
install.packages("tree")
# An alternative is library(rpart)
library(tree)
tree1 <- tree(Species ~ Sepal.Width + Petal.Width,data=iris)
summary(tree1)
plot(tree1)
text(tree1)
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col=as.numeric(iris$Species))
partition.tree(tree1,label="Species",add=TRUE)
legend(1.75,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
set.seed(32313)
newdata <- data.frame(Petal.Width = runif(20,0,2.5),Sepal.Width = runif(20,2,4.5)) pred1 <- predict(tree1,newdata)
pred1
set.seed(32313)
newdata <- data.frame(Petal.Width = runif(20,0,2.5),Sepal.Width = runif(20,2,4.5))
pred1 <- predict(tree1,newdata)
pred1
pred1 <- predict(tree1,newdata,type="class")
plot(newdata$Petal.Width,newdata$Sepal.Width,col=as.numeric(pred1),pch=19)
partition.tree(tree1,"Species",add=TRUE)
data(Cars93,package="MASS")
head(Cars93)
treeCars <- tree(DriveTrain ~ MPG.city + MPG.highway + AirBags + EngineSize + Width + Length + Weight + Price + Cylinders + Horsepower + Wheelbase,data=Cars93)
plot(treeCars)
text(treeCars)
par(mfrow=c(1,2))
plot(cv.tree(treeCars,FUN=prune.tree,method="misclass"))
plot(cv.tree(treeCars))
pruneTree <- prune.tree(treeCars,best=4)
plot(pruneTree)
text(pruneTree)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
rstudio::viewData(SAheart)
?trim
?attach
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
attach(trainSA)
glm1 <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data=trainSA)
?cv
?cv.glm
??cv
??cv.glm
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
cv1 <- cv.glm(trainSA,glm1,missClass,K=2)
library(boot)
cv1 <- cv.glm(trainSA,glm1,missClass,K=2)
cv1$delta
library(ElemStatLearn)
library(boot)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
attach(trainSA)
glm1 <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data=trainSA)
detach(trainSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
cv1 <- cv.glm(trainSA,glm1,missClass,K=2)
cv1$delta
cv2 <- cv.glm(testSA,glm1,missClass,K=2)
cv2$delta
fix(cv1)
library(ElemStatLearn)
library(boot)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
attach(trainSA)
glm1 <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data=trainSA)
detach(trainSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
cv1 <- cv.glm(trainSA,glm1,missClass)
cv1$delta
cv2 <- cv.glm(testSA,glm1,missClass)
cv2$delta
missClass(trainSA,gl1)
missClass(trainSA,glm1)
?predict.glm
predict(glm1)
predict(glm1, type="response")
missClass(trainSA,predict(glm1))
missClass(testSA,predict(glm1))
log(missClass(testSA,predict(glm1)))
missClass(testSA,predict.glm(glm1))
missClass(testSA,predict(glm1))
summary(cv1)
summary(cv2)
predict.glm(glm1,newdata=testSA, type="reponse")
predict.glm(glm1,newdata=testSA, type="response")
summary(predict.glm(glm1,newdata=testSA, type="response"))
missClass(testSA,predict.glm(glm1,newdata=testSA, type="response"))
missClass(testSA,predict.glm(glm1, type="response"))
missClass(testSA,predict(glm1, type="response"))
missClass(trainSA,predict(glm1, type="response"))
missClass(trainSA$chd,predict(glm1, type="response"))
missClass(testSA$ch,predict(glm1, type="response"))
missClass(testSA$chd,predict(glm1, type="response"))
missClass(testSA$chd,predict(glm1, newdata=testSA, type="response"))
?print
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
install.packages("pgmm")
library(pgmm)
olive = olive[,-1]
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
rstudio::viewData(olive)
rstudio::viewData(newdata)
tree1 <- tree(olive$Area ~ . , data=olive)
library(tree)
tree1 <- tree(olive$Area ~ . , data=olive)
summary(tree1)
library(tree)
plot(tree1)
text(tree1)
predict(tree1,newdata)
rstudio::viewData(newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
newData = data.frame(Palmitic = 1200, Palmitoleic = 120, Stearic=200,Oleic=7000,Linoleic = 900, Linolenic = 32, Arachidic=60,Eicosenoic=6)
