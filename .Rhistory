install.packages("knitr")
<html>
<html>
<html>
<head>
<title>Title</title>
</head>
<body>
<p>This is an R HTML document. When you click the <b>Knit HTML</b> button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:</p>
<!--begin.rcode
summary(cars)
end.rcode-->
<p>You can also embed plots, for example:</p>
<!--begin.rcode fig.width=7, fig.height=6
plot(cars)
end.rcode-->
</body>
</html>
download.file("https://dl.dropbox.com/u/7710864/data/ravensData.rda",
destfile="./data/ravensData.rda",method="curl")
load("./data/ravensData.rda")
head(ravensData)
download.file("https://dl.dropbox.com/u/7710864/data/ravensData.rda",
destfile="./data/ravensData.rda",method="curl")
load("./data/ravensData.rda")
head(ravensData)
setwd("~/Dropbox/Courses")
setwd("~/Dropbox/Courses/Data Analysis")
setwd("~/Dropbox/Courses/Data Analysis/Exercices/Data Analysis")
load("./data/ravensData.rda")
head(ravensData)
download.file("https://dl.dropbox.com/u/7710864/data/ravensData.rda",
destfile="./data/ravensData.rda",method="curl")
load("./data/ravensData.rda")
head(ravensData)
lmRavens <- lm(ravensData$ravenWinNum ~ ravensData$ravenScore)
summary(lmRavens)
plot(ravensData$ravenScore, lmRavens$fitted,
pch=19, col="blue",
ylab="Prob Win",
xlab="Raven Score")
logRegRavens <- glm(ravensData$ravenWinNum ~ ravensData$ravenScore,
family="binomial")
summary(logRegRavens)
plot(ravensData$ravenScore, logRegRavens$fitted,
pch=19, col="blue",
ylab="Prob Win",
xlab="Raven Score")
exp(logRegRavens$coeff)
exp(confint(logRegRavens))
anova(logRegRavens,test="Chisq")
set.seed(3433); par(mfrow=c(1,2))
poisData2 <- rpois(100,lambda=100)
poisData1 <- rpois(100,lambda=50)
hist(poisData1,col="blue",xlim=c(0,150))
hist(poisData2,col="blue",xlim=c(0,150))
c(mean(poisData1),var(poisData1))
c(mean(poisData2),var(poisData2))
download.file("https://dl.dropbox.com/u/7710864/data/gaData.rda",
destfile="./data/gaData.rda",method="curl")
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
plot(gaData$julian,gaData$visits,
pch=19,col="darkgrey",
xlab="Julian",ylab="Visits")
plot(gaData$julian,gaData$visits,
pch=19,col="darkgrey",
xlab="Julian",ylab="Visits")
plot(gaData$julian,gaData$visits,
pch=19,col="darkgrey",
xlab="Julian",ylab="Visits")
lm1 <- lm(gaData$visits ~ gaData$julian)
abline(lm, col="red", lwd=3)
abline(lm1, col="red", lwd=3)
glm1 <- glm(gaData$visits ~ gaData$julian, family="poisson")
lines(gaData$julian, glm1$fitted, col="blue", lwd=3)
plot(glm1$fitted,glm1$residuals,
pch=19, col="grey",
ylab="Residuals",
xlab="Date")
{
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a<-(1-level)/2;a<-c(a,1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,pct)
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
library(sandwich)
confint.agnostic <- function (object, parm, level = 0.95, ...) {
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a<-(1-level)/2;a<-c(a,1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,pct)
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
library(sandwich)
install.packages("sandwich")
library(sandwich)
confint.agnostic <- function (object, parm, level = 0.95, ...) {
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a<-(1-level)/2;a<-c(a,1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,pct)
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
confint.agnostic <- function (object, parm, level = 0.95, ...) {
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a<-(1-level)/2;a<-c(a,1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,pct))
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
confint(glm1)
confint.agnostic(glm1)
#Fitting rates in R
glm2 <- glm(gaData$simplystats ~ julian(gaData$date),
offset=log(visits+1),
family="poisson",
data=gaData)
plot(julian(gaData$date),glm2$fitted,
col="blue",pch=19,
xlab="Date",ylab="Fitted Counts")
points(julian(gaData$date),glm1$fitted
,col="red",pch=19)
plot(julian(gaData$date),gaData$simplystats/(gaData$visits+1),
col="grey",
xlab="Date", ylab="Fitted Rates",
pch=19)
lines(julian(gaData$date),glm2$fitted/(gaData$visits+1),
col="blue",lwd=3)
set.seed(3433); par(mfrow=c(1,2))
data <- rnorm(100,mean=seq(0,3,length=100),
sd=seq(0.1,3,length=100))
lm1 <- lm(data ~ seq(0,3,length=100))
plot(seq(0,3,length=100),data,pch=19,col="grey")
abline(lm1,col="red",lwd=3)
plot(seq(0,3,length=100),lm1$residuals,,pch=19,col="grey")
abline(c(0,0),col="red",lwd=3)
vcovHC(lm1)
summary(lm1)$cov.unscaled
#Model checking - linear trend
set.seed(3433); par(mfrow=c(1,2))
data <- rnorm(100,mean=seq(0,3,length=100)^3,sd=2)
lm1 <- lm(data ~ seq(0,3,length=100))
plot(seq(0,3,length=100),data,pch=19,col="grey")
abline(lm1,col="red",lwd=3)
plot(seq(0,3,length=100),lm1$residuals,,pch=19,col="grey")
abline(c(0,0),col="red",lwd=3)
#Model checking - missing covariate
set.seed(3433); par(mfrow=c(1,3))
z <- rep(c(-0.5,0.5),50)
data <- rnorm(100,mean=(seq(0,3,length=100) + z),
sd=seq(0.1,3,length=100))
lm1 <- lm(data ~ seq(0,3,length=100))
plot(seq(0,3,length=100),data,pch=19,col=((z>0)+3))
abline(lm1,col="red",lwd=3)
plot(seq(0,3,length=100),lm1$residuals,pch=19,col=((z>0)+3))
abline(c(0,0),col="red",lwd=3)
boxplot(lm1$residuals ~ z,col = ((z>0)+3) )
set.seed(343); par(mfrow=c(1,2)); betahat <- rep(NA,100)
x <- seq(0,3,length=100); y <- rcauchy(100)
lm1 <- lm(y ~ x) plot(x,y,pch=19,col="blue")
abline(lm1,col="red",lwd=3)
for(i in 1:length(data)){
betahat[i] <- lm(y[-i] ~ x[-i])$coeff[2]
}
plot(betahat - lm1$coeff[2],col="blue",pch=19)
abline(c(0,0),col="red",lwd=3)
#Model checking - outliers
set.seed(343); par(mfrow=c(1,2)); betahat <- rep(NA,100)
x <- seq(0,3,length=100); y <- rcauchy(100)
lm1 <- lm(y ~ x)
plot(x,y,pch=19,col="blue")
abline(lm1,col="red",lwd=3)
for(i in 1:length(data)){
betahat[i] <- lm(y[-i] ~ x[-i])$coeff[2]
}
plot(betahat - lm1$coeff[2],col="blue",pch=19)
abline(c(0,0),col="red",lwd=3)
set.seed(343)
x <- seq(0,3,length=100)
y <- rcauchy(100)
lm1<-lm(y~x)
rlm1<-rlm(y~x)
lm1$coeff
rlm1$coeff
install.packages{"MASS"}
install.packages("MASS")
set.seed(343)
install.packages("MASS")
install.packages("MASS")
library(MASS)
set.seed(343)
x <- seq(0,3,length=100)
y <- rcauchy(100)
lm1<-lm(y~x)
rlm1<-rlm(y~x)
lm1$coeff
rlm1$coeff
par(mfrow=c(1,2))
plot(x,y,pch=19,col="grey")
lines(x,lm1$fitted,col="blue",lwd=3);
lines(x,rlm1$fitted,col="green",lwd=3)
plot(x,y,pch=19,col="grey",ylim=c(-5,5),main="Zoomed In")
lines(x,lm1$fitted,col="blue",lwd=3);
lines(x,rlm1$fitted,col="green",lwd=3)
set.seed(343); par(mfrow=c(1,2))
x <- seq(0,3,length=100); y <- rnorm(100);
lm1 <- lm(y ~ x)
plot(lm1)
#Movie Data
download.file("http://www.rossmanchance.com/iscam2/data/movies03RT.txt",
destfile="./data/movies.txt")
movies <- read.table("./data/movies.txt",sep="\t",
header=T,quote="")
head(movies)
movies <- movies[,-1]
lm1 <- lm(score ~ .,data=movies)
aicFormula <- step(lm1)
aicFormula
library(leaps);
regSub <- regsubsets(score ~ .,data=movies)
plot(regSub)
par(mfcol=c(1,1))
plot(regSub)
library(BMA)
bicglm1 <- bic.glm(score ~.,data=movies,glm.family="gaussian")
print(bicglm1)
install.packages("BMA")
library(BMA)
bicglm1 <- bic.glm(score ~.,data=movies,glm.family="gaussian")
print(bicglm1)
data(warpbreaks)
log(0.2/(1-0.2))
library(glm2)
install.packages("glm2")
library(glm2)
data(crabs)
rstudio::viewData(crabs)
?crabs
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
lines(crabs$Width,glm1$fitted,col="red",lwd=3)
ablines(crabs$Width,glm1$fitted,col="red",lwd=3)
abline(crabs$Width,glm1$fitted,col="red",lwd=3)
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
abline(crabs$Width,glm1$fitted,col="red",lwd=3)
lines(crabs$Width,glm1$fitted,col="red",lwd=3)
rstudio::viewData(crabs)
lines(crabs[sort(crabs$Width),"Width"], glm1$fitted,col="red",lwd=3)
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(sort(crabs$Width),"Satellites"] ~ sort(crabs$Width),"Width"], family="poisson")
lines(crabs[sort(crabs$Width),"Width"], glm1$fitted,col="red",lwd=3)
summary(glm1)
library(glm2)
data(crabs)
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(crabs$Satellites ~ crabs$Width], family="poisson")
lines(crabs$Width, glm1$fitted,col="red",lwd=3)
summary(glm1)
points(crabs$Width, glm1$fitted,col="red",lwd=3)
data(crabs)
plot(crabs$Width, crabs$Satellites,
pch=19, col="grey",
xlab="Width of the famale in centimeters",
ylab="Number of male partners")
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
points(crabs$Width, glm1$fitted,col="red",lwd=3,pch=19)
summary(glm1)
glm1$coefficients
glm1$coefficients[1]+glm1$coefficients[2]*22
exp(glm1$coefficients[1]+glm1$coefficients[2]*22)
data(quine)
install.packages("quine")
data(quine)
install.packages("MASS")
library(MASS)
data(quine)
?quine
lm1 <- lm(log(Days) ~ ., data=quine)
lm1 <- lm(Days ~ ., data=quine)
aicFormula <- step(lm1)
lm1 <- lm(ln(Days) ~ ., data=quine)
lm1 <- lm(log(Days) ~ ., data=quine)
lm1 <- lm(log(Days+1) ~ ., data=quine)
aicFormula <- step(lm1)
lm1 <- lm(log(Days+1) ~ ., data=quine)
aicFormula <- step(lm1)
lm1 <- lm(log(Days+1) ~ ., data=quine)
aicFormula <- step(lm1)
