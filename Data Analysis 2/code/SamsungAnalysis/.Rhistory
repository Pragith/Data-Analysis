+ tBodyAcc_energy___X
#+  tBodyAcc_std___X
#+ tBodyAcc_mad___X
# + tBodyAccJerk_max___X
,
data=trainingSet, prox=TRUE, ntree=50)
tree1 <- walkdownTree
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
#text(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
print(c("Sensitivity:",activity))
sum(activity == predict(tree1, testSamples[testSamples$activity==activity,], type="class"))/sum(testSamples$activity==activity)
print(c("Specificity:", activity))
sum(activity != predict(tree1, testSamples[testSamples$activity!=activity,], type="class"))/sum(testSamples$activity!=activity)
combineTree <- randomForest(activity ~
tGravityAcc_mean___Y # laying
+ tGravityAcc_mean___X # sitting
+ angle_Y_gravityMean_  # standing
+ tBodyAccJerk_energy___X #walk
#+ fBodyAcc_max___X #walk
+ fBodyBodyAccJerkMag_mean__ #walk*
+ tBodyAccJerk_max___X #walkdown
+ tBodyAcc_energy___X #walkdown
#+ tBodyAcc_energy___X #walkdown
#+ tBodyAcc_std___X #walkdown
#+ tBodyAcc_mad___X #walkdown
+ tBodyAccJerk_std___X # walkup
+ tBodyAccJerk_std___Z # walkup
,
data=trainingSet, prox=TRUE, ntree=50)
tree1 <- combineTree
#pruneTree <- prune.tree(tree1, best=10)
#plot(pruneTree)
#text(pruneTree)
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity")
errorRates
combineTree <- randomForest(activity ~
tGravityAcc_mean___Y # laying
+ tGravityAcc_mean___X # sitting
+ angle_Y_gravityMean_  # standing
+ tBodyAccJerk_energy___X #walk
+ fBodyAcc_max___X #walk -
+ fBodyBodyAccJerkMag_mean__ #walk*
+ tBodyAccJerk_max___X #walkdown
+ tBodyAcc_energy___X #walkdown
+ tBodyAccJerk_std___X # walkup
+ tBodyAccJerk_std___Z # walkup
,
data=trainingSet, prox=TRUE, ntree=50)
tree1 <- combineTree
#pruneTree <- prune.tree(tree1, best=10)
#plot(pruneTree)
#text(pruneTree)
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity")
errorRates
combineTree <- randomForest(activity ~
tGravityAcc_mean___Y # laying
+ tGravityAcc_mean___X # sitting
+ angle_Y_gravityMean_  # standing
+ tBodyAccJerk_energy___X #walk
+ fBodyBodyAccJerkMag_mean__ #walk*
+ tBodyAccJerk_max___X #walkdown
+ tBodyAcc_energy___X #walkdown
+ tBodyAccJerk_std___X # walkup
+ tBodyAccJerk_std___Z # walkup
,
data=trainingSet, prox=TRUE, ntree=50)
tree1 <- combineTree
#pruneTree <- prune.tree(tree1, best=10)
#plot(pruneTree)
#text(pruneTree)
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity")
errorRates
combineTree <- randomForest(activity ~
tGravityAcc_mean___Y # laying
+ tGravityAcc_mean___X # sitting
+ angle_Y_gravityMean_  # standing
+ tBodyAccJerk_energy___X #walk
+ fBodyBodyAccJerkMag_mean__ #walk*
+ tBodyAccJerk_max___X #walkdown
+ tBodyAcc_energy___X #walkdown
+ tBodyAccJerk_std___X # walkup
+ tBodyAccJerk_std___Z # walkup
,
data=trainingSet, prox=TRUE, ntree=50)
tree1 <- combineTree
tree1 <- prune.tree(tree1, best=10)
#plot(pruneTree)
#text(pruneTree)
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity")
errorRates
combineTree <- randomForest(activity ~
tGravityAcc_mean___Y # laying
+ tGravityAcc_mean___X # sitting
+ angle_Y_gravityMean_  # standing
+ tBodyAccJerk_energy___X #walk
+ fBodyBodyAccJerkMag_mean__ #walk*
+ tBodyAccJerk_max___X #walkdown
+ tBodyAcc_energy___X #walkdown
+ tBodyAccJerk_std___X # walkup
+ tBodyAccJerk_std___Z # walkup
,
data=trainingSet, prox=TRUE, ntree=50)
tree1 <- combineTree
tree1 <- prune.tree(tree1, best=6)
#plot(pruneTree)
#text(pruneTree)
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity")
errorRates
combineTree <- randomForest(activity ~
tGravityAcc_mean___Y # laying
+ tGravityAcc_mean___X # sitting
+ angle_Y_gravityMean_  # standing
+ tBodyAccJerk_energy___X #walk
+ fBodyBodyAccJerkMag_mean__ #walk*
+ tBodyAccJerk_max___X #walkdown
+ tBodyAcc_energy___X #walkdown
+ tBodyAccJerk_std___X # walkup
+ tBodyAccJerk_std___Z # walkup
,
data=trainingSet, prox=TRUE, ntree=50)
tree1 <- combineTree
tree1 <- prune.tree(tree1, best=4)
#plot(pruneTree)
#text(pruneTree)
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity")
errorRates
combineTree <- randomForest(activity ~
tGravityAcc_mean___Y # laying
+ tGravityAcc_mean___X # sitting
+ angle_Y_gravityMean_  # standing
+ tBodyAccJerk_energy___X #walk
+ fBodyBodyAccJerkMag_mean__ #walk*
+ tBodyAccJerk_max___X #walkdown
+ tBodyAcc_energy___X #walkdown
+ tBodyAccJerk_std___X # walkup
+ tBodyAccJerk_std___Z # walkup
,
data=trainingSet, prox=TRUE, ntree=50)
tree1 <- combineTree
tree1 <- prune.tree(tree1, best=1)
#plot(pruneTree)
#text(pruneTree)
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
falsePositive <- sum(a==predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity)
falseNegative <- sum(a!=predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
falsePositive <- sum(a==predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity)
falseNegative <- sum(a!=predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
#colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
#falsePositive <- sum( a == predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity)
#falseNegative <- sum(a != predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
#colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
#falsePositive <- sum( a == predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity)
#falseNegative <- sum(a != predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
#colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
falsePositive <- sum( a == predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity)
#falseNegative <- sum(a != predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
#colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
falsePositive <- sum( a == predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/length(testSamples$activity)
#falseNegative <- sum(a != predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
#colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
falsePositive <- sum( a == predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/length(testSamples$activity)
falseNegative <- sum(a != predict(tree1, testSamples[testSamples$activity==a,], type="class"))/length(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity))
#, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
#colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
falsePositive <- sum( a == predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/length(testSamples$activity)
falseNegative <- sum(a != predict(tree1, testSamples[testSamples$activity==a,], type="class"))/length(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
#colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
falsePositive <- sum( a == predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/length(testSamples$activity)
falseNegative <- sum(a != predict(tree1, testSamples[testSamples$activity==a,], type="class"))/length(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
library(randomForest)
getTree(tree1)
plot(getTree(tree1))
plot(tree1)
MDSplot(tree1, testSamples$activity)
importance(tree1)
varImpPlot(tree1)
plot(margin(tree1,chrun))
hist(margin(tree1,chrun))
boxplot(margin(tree1,churn)~testSamples$churn)
boxplot(margin(tree1,churn)~data$churn)
boxplot(margin(tree1,churn)~testSamples$activity)
MDSplot(tree1, testSamples$activity, k=2)
partialPlot(tree1, testSamples, activity)
partialPlot(tree1, testSamples, activity, "No")
varImpPlot(tree1)
data(mtcars)
plot(randomForest(mpg ~ ., mtcars, keep.forest=FALSE, ntree=100), log="y")
plot(tree1)
fix(tree1)
?randomForest
?plot.randomForest
combineTree <- randomForest(activity ~
tGravityAcc_mean___Y # laying
+ tGravityAcc_mean___X # sitting
+ angle_Y_gravityMean_  # standing
+ tBodyAccJerk_energy___X #walk
+ fBodyBodyAccJerkMag_mean__ #walk*
+ tBodyAccJerk_max___X #walkdown
+ tBodyAcc_energy___X #walkdown
+ tBodyAccJerk_std___X # walkup
+ tBodyAccJerk_std___Z # walkup
,
data=trainingSet, prox=TRUE, ntree=500)
tree1 <- combineTree
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
falsePositive <- sum( a == predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/length(testSamples$activity)
falseNegative <- sum(a != predict(tree1, testSamples[testSamples$activity==a,], type="class"))/length(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
combineTree <- randomForest(activity ~
tGravityAcc_mean___Y # laying
+ tGravityAcc_mean___X # sitting
+ angle_Y_gravityMean_  # standing
+ tBodyAccJerk_energy___X #walk
+ fBodyBodyAccJerkMag_mean__ #walk*
+ tBodyAccJerk_max___X #walkdown
+ tBodyAcc_energy___X #walkdown
+ tBodyAccJerk_std___X # walkup
+ tBodyAccJerk_std___Z # walkup
,
data=trainingSet, prox=TRUE, ntree=50)
tree1 <- combineTree
summary(tree1)
par(mfrow=c(1,1))
plot(tree1)
set.seed(333)
testSamples <- testSet[sample(1:371,size=328,replace=T),]
table(testSamples$activity,predict(tree1, testSamples, type="class"))
errorRates <- data.frame(stringsAsFactors=TRUE)
activities <- levels(testSet$activity)
for(a in activities){
#  print(c("Sensitivity:",a,":",sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)))
sensitivity <- sum(a == predict(tree1, testSamples[testSamples$activity==a,], type="class"))/sum(testSamples$activity==a)
specificity <- sum(a != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a)
falsePositive <- sum( a == predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/length(testSamples$activity)
falseNegative <- sum(a != predict(tree1, testSamples[testSamples$activity==a,], type="class"))/length(testSamples$activity)
errorRates <- rbind(errorRates, c( factor(a, levels=levels(testSet$activity)) , sensitivity, specificity, falsePositive, falseNegative))
#  print(c("Specificity:", a, ":", sum(activity != predict(tree1, testSamples[testSamples$activity!=a,], type="class"))/sum(testSamples$activity!=a) ))
}
colnames(errorRates)<-c("activity","sensitivity","specificity","falsePositive", "falseNegative")
errorRates
plot(tree1, main="Errors rate of trees")
plot(tree1, main="Error ratesof trees")
plot(tree1, main="Error rates of trees")
plot(tree1, main="Error rates of trees", y="Trees")
plot(tree1, main="Error rates of trees", ylab=="Trees")
plot(tree1, main="Error rates of trees", ylab="Trees")
plot(tree1, main="Error rates of trees", ylab="Trees")
plot(tree1, main="Error rates of trees", ylab="Trees")
plot(tree1, main="Error rates of trees")
plot(tree1, main="Error rates of trees", ylab="Tree")
